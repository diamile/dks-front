{"remainingRequest":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\src\\components\\Article1.vue?vue&type=template&id=0db97cab&scoped=true&","dependencies":[{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\src\\components\\Article1.vue","mtime":1616537225243},{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615656863448},{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1615656908637},{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615656863448},{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1615656908637}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9InNpbmdsZV9sZWZ0X2NvbG91bV93cmFwcGVyIj4KICAgICAgICAgIDxoMiBjbGFzcz0idGl0bGUiPkFDVFVBTElURTwvaDI+CiAgICAgICAgICA8YSBjbGFzcz0ibW9yZSIgaHJlZj0iIyI+bW9yZTwvYT4KCiAgICAgICAgICA8IS0tIDxkaXYgY2xhc3M9InNpbmdsZV9sZWZ0X2NvbG91bSBmbG9hdGxlZnQiPiAKICAgICAgICAgICAgICA8aW1nIHNyYz0iLi4vYXNzZXRzL2ltYWdlcy9raGFsaWZhLmpwZyIgYWx0PSIiIGNsYXNzPSJpbWciIC8+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudCI+CiAgICAgICAgICAgICAgPGgyPkFjdHVhbGl0w6k8L2gyPgogICAgICAgICAgICAgIDxwPkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBhbiBoaXMgZXRpYW0gdG9ycXVhdG9zLiBUb2xsaXQgc29sZWF0IHBoYWVkcnVtIHRlIGR1bywgZXVtIGN1IHJlY3RlcXVlIGV4cGV0ZW5kaXMgbmVnbGVnZW50dXIuIEN1IG1lbnRpdHVtIG1haWVzdGF0aXMgcGVyc2VxdWVyaXMgcHJvLCBwcmkgcG9uZGVydW0gdHJhY3RhdG9zIGVpLjwvcD4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIAogICAgICAgICAgPC9kaXY+IC0tPgogICAgICAgICAgIAogICAgICAgICAgPHJvdXRlci1saW5rIDp0bz0ieyBwYXRoOicvZGV0YWlsLycrMTIzfSI+CgogICAgICAgICAgPGRpdiBjbGFzcz0ic2luZ2xlX2xlZnRfY29sb3VtIGZsb2F0bGVmdCI+IAogICAgICAgICAgICAgIDxpbWcgc3JjPSIuLi9hc3NldHMvaW1hZ2VzL2toYWxpZmEuanBnIiBhbHQ9IiIgY2xhc3M9ImltZyIgLz4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgICAgICAgICAgICA8aDI+QWN0dWFsaXTDqTwvaDI+CiAgICAgICAgICAgICAgPHA+TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGFuIGhpcyBldGlhbSB0b3JxdWF0b3MuIFRvbGxpdCBzb2xlYXQgcGhhZWRydW0gdGUgZHVvLCBldW0gY3UgcmVjdGVxdWUgZXhwZXRlbmRpcyBuZWdsZWdlbnR1ci4gQ3UgbWVudGl0dW0gbWFpZXN0YXRpcyBwZXJzZXF1ZXJpcyBwcm8sIHByaSBwb25kZXJ1bSB0cmFjdGF0b3MgZWkuPC9wPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgCiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIAogICAgICAgICAgPC9yb3V0ZXItbGluaz4KCiAgICAgICAgICA8ZGl2IGNsYXNzPSJzaW5nbGVfbGVmdF9jb2xvdW0gZmxvYXRsZWZ0Ij4gCiAgICAgICAgICAgICAgPGltZyBzcmM9Ii4uL2Fzc2V0cy9pbWFnZXMvc29ua28uanBnIiBhbHQ9IiIgY2xhc3M9ImltZyIgLz4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgICAgICAgICAgICA8aDI+QWN0dWFsaXTDqTwvaDI+CiAgICAgICAgICAgICAgPHA+TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGFuIGhpcyBldGlhbSB0b3JxdWF0b3MuIFRvbGxpdCBzb2xlYXQgcGhhZWRydW0gdGUgZHVvLCBldW0gY3UgcmVjdGVxdWUgZXhwZXRlbmRpcyBuZWdsZWdlbnR1ci4gQ3UgbWVudGl0dW0gbWFpZXN0YXRpcyBwZXJzZXF1ZXJpcyBwcm8sIHByaSBwb25kZXJ1bSB0cmFjdGF0b3MgZWkuPC9wPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICAKICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxkaXYgY2xhc3M9InNpbmdsZV9sZWZ0X2NvbG91bSBmbG9hdGxlZnQiPiAKICAgICAgICAgICAgICA8aW1nIHNyYz0iLi4vYXNzZXRzL2ltYWdlcy93YWRlLmpwZyIgYWx0PSIiIGNsYXNzPSJpbWciIC8+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudCI+CiAgICAgICAgICAgICAgPGgyPkFjdHVhbGl0w6k8L2gyPgogICAgICAgICAgICAgIDxwPkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBhbiBoaXMgZXRpYW0gdG9ycXVhdG9zLiBUb2xsaXQgc29sZWF0IHBoYWVkcnVtIHRlIGR1bywgZXVtIGN1IHJlY3RlcXVlIGV4cGV0ZW5kaXMgbmVnbGVnZW50dXIuIEN1IG1lbnRpdHVtIG1haWVzdGF0aXMgcGVyc2VxdWVyaXMgcHJvLCBwcmkgcG9uZGVydW0gdHJhY3RhdG9zIGVpLjwvcD4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxkaXYgY2xhc3M9InNpbmdsZV9sZWZ0X2NvbG91bSBmbG9hdGxlZnQiPiAKICAgICAgICAgICAgICA8aW1nIHNyYz0iLi4vYXNzZXRzL2ltYWdlcy9haG1lZC5qcGciIGFsdD0iIiBjbGFzcz0iaW1nIi8+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudCI+CiAgICAgICAgICAgICAgPGgyPkFjdHVhbGl0w6k8L2gyPgogICAgICAgICAgICAgIDxwPkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBhbiBoaXMgZXRpYW0gdG9ycXVhdG9zLiBUb2xsaXQgc29sZWF0IHBoYWVkcnVtIHRlIGR1bywgZXVtIGN1IHJlY3RlcXVlIGV4cGV0ZW5kaXMgbmVnbGVnZW50dXIuIEN1IG1lbnRpdHVtIG1haWVzdGF0aXMgcGVyc2VxdWVyaXMgcHJvLCBwcmkgcG9uZGVydW0gdHJhY3RhdG9zIGVpLjwvcD4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxkaXYgY2xhc3M9InNpbmdsZV9sZWZ0X2NvbG91bSBmbG9hdGxlZnQiPgogICAgICAgICAgICAgPGltZyBzcmM9Ii4uL2Fzc2V0cy9pbWFnZXMvd2FkZS5qcGciIGFsdD0iTm90ZWJvb2siIGNsYXNzPSJpbWciID4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQiPgogICAgICAgICAgICAgIDxoMj5BY3R1YWxpdMOpPC9oMj4KICAgICAgICAgICAgICA8cD5Mb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgYW4gaGlzIGV0aWFtIHRvcnF1YXRvcy4gVG9sbGl0IHNvbGVhdCBwaGFlZHJ1bSB0ZSBkdW8sIGV1bSBjdSByZWN0ZXF1ZSBleHBldGVuZGlzIG5lZ2xlZ2VudHVyLiBDdSBtZW50aXR1bSBtYWllc3RhdGlzIHBlcnNlcXVlcmlzIHBybywgcHJpIHBvbmRlcnVtIHRyYWN0YXRvcyBlaS48L3A+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxkaXYgY2xhc3M9InNpbmdsZV9sZWZ0X2NvbG91bSBmbG9hdGxlZnQiPgogICAgICAgICAgICAgPGltZyBzcmM9Ii4uL2Fzc2V0cy9pbWFnZXMvd2FkZS5qcGciIGFsdD0iTm90ZWJvb2siIGNsYXNzPSJpbWciPgogICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudCI+CiAgICAgICAgICAgICAgPGgyPkFjdHVhbGl0w6k8L2gyPgogICAgICAgICAgICAgIDxwPkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBhbiBoaXMgZXRpYW0gdG9ycXVhdG9zLiBUb2xsaXQgc29sZWF0IHBoYWVkcnVtIHRlIGR1bywgZXVtIGN1IHJlY3RlcXVlIGV4cGV0ZW5kaXMgbmVnbGVnZW50dXIuIEN1IG1lbnRpdHVtIG1haWVzdGF0aXMgcGVyc2VxdWVyaXMgcHJvLCBwcmkgcG9uZGVydW0gdHJhY3RhdG9zIGVpLjwvcD4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICAKICAgICAgICAKICA8L2Rpdj4K"},null]}