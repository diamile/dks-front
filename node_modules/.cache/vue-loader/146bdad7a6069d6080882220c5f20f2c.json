{"remainingRequest":"C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\src\\components\\Accueil\\Culture.vue?vue&type=template&id=f76f929a&scoped=true&","dependencies":[{"path":"C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\src\\components\\Accueil\\Culture.vue","mtime":1617042462268},{"path":"C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615656863448},{"path":"C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1615656908637},{"path":"C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615656863448},{"path":"C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1615656908637}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}