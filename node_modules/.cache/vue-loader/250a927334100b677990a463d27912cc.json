{"remainingRequest":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\src\\components\\Article1.vue?vue&type=template&id=0db97cab&scoped=true&","dependencies":[{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\src\\components\\Article1.vue","mtime":1616537225243},{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615656863448},{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1615656908637},{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615656863448},{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1615656908637}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHN0YXRpY0NsYXNzOiAic2luZ2xlX2xlZnRfY29sb3VtX3dyYXBwZXIiIH0sCiAgICBbCiAgICAgIF9jKCJoMiIsIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZSIgfSwgW192bS5fdigiQUNUVUFMSVRFIildKSwKICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAibW9yZSIsIGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFtfdm0uX3YoIm1vcmUiKV0pLAogICAgICBfYygicm91dGVyLWxpbmsiLCB7IGF0dHJzOiB7IHRvOiB7IHBhdGg6ICIvZGV0YWlsLyIgKyAxMjMgfSB9IH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNpbmdsZV9sZWZ0X2NvbG91bSBmbG9hdGxlZnQiIH0sIFsKICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nIiwKICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvaW1hZ2VzL2toYWxpZmEuanBnIiksIGFsdDogIiIgfQogICAgICAgICAgfSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgX2MoImgyIiwgW192bS5fdigiQWN0dWFsaXTDqSIpXSksCiAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgYW4gaGlzIGV0aWFtIHRvcnF1YXRvcy4gVG9sbGl0IHNvbGVhdCBwaGFlZHJ1bSB0ZSBkdW8sIGV1bSBjdSByZWN0ZXF1ZSBleHBldGVuZGlzIG5lZ2xlZ2VudHVyLiBDdSBtZW50aXR1bSBtYWllc3RhdGlzIHBlcnNlcXVlcmlzIHBybywgcHJpIHBvbmRlcnVtIHRyYWN0YXRvcyBlaS4iCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl9tKDApLAogICAgICBfdm0uX20oMSksCiAgICAgIF92bS5fbSgyKSwKICAgICAgX3ZtLl9tKDMpLAogICAgICBfdm0uX20oNCkKICAgIF0sCiAgICAxCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNpbmdsZV9sZWZ0X2NvbG91bSBmbG9hdGxlZnQiIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImltZyIsCiAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvaW1hZ2VzL3NvbmtvLmpwZyIpLCBhbHQ6ICIiIH0KICAgICAgfSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudCIgfSwgWwogICAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIkFjdHVhbGl0w6kiKV0pLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGFuIGhpcyBldGlhbSB0b3JxdWF0b3MuIFRvbGxpdCBzb2xlYXQgcGhhZWRydW0gdGUgZHVvLCBldW0gY3UgcmVjdGVxdWUgZXhwZXRlbmRpcyBuZWdsZWdlbnR1ci4gQ3UgbWVudGl0dW0gbWFpZXN0YXRpcyBwZXJzZXF1ZXJpcyBwcm8sIHByaSBwb25kZXJ1bSB0cmFjdGF0b3MgZWkuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNpbmdsZV9sZWZ0X2NvbG91bSBmbG9hdGxlZnQiIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImltZyIsCiAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvaW1hZ2VzL3dhZGUuanBnIiksIGFsdDogIiIgfQogICAgICB9KSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250ZW50IiB9LCBbCiAgICAgICAgX2MoImgyIiwgW192bS5fdigiQWN0dWFsaXTDqSIpXSksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgYW4gaGlzIGV0aWFtIHRvcnF1YXRvcy4gVG9sbGl0IHNvbGVhdCBwaGFlZHJ1bSB0ZSBkdW8sIGV1bSBjdSByZWN0ZXF1ZSBleHBldGVuZGlzIG5lZ2xlZ2VudHVyLiBDdSBtZW50aXR1bSBtYWllc3RhdGlzIHBlcnNlcXVlcmlzIHBybywgcHJpIHBvbmRlcnVtIHRyYWN0YXRvcyBlaS4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2luZ2xlX2xlZnRfY29sb3VtIGZsb2F0bGVmdCIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nIiwKICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uL2Fzc2V0cy9pbWFnZXMvYWhtZWQuanBnIiksIGFsdDogIiIgfQogICAgICB9KSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250ZW50IiB9LCBbCiAgICAgICAgX2MoImgyIiwgW192bS5fdigiQWN0dWFsaXTDqSIpXSksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgYW4gaGlzIGV0aWFtIHRvcnF1YXRvcy4gVG9sbGl0IHNvbGVhdCBwaGFlZHJ1bSB0ZSBkdW8sIGV1bSBjdSByZWN0ZXF1ZSBleHBldGVuZGlzIG5lZ2xlZ2VudHVyLiBDdSBtZW50aXR1bSBtYWllc3RhdGlzIHBlcnNlcXVlcmlzIHBybywgcHJpIHBvbmRlcnVtIHRyYWN0YXRvcyBlaS4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2luZ2xlX2xlZnRfY29sb3VtIGZsb2F0bGVmdCIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nIiwKICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uL2Fzc2V0cy9pbWFnZXMvd2FkZS5qcGciKSwgYWx0OiAiTm90ZWJvb2siIH0KICAgICAgfSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudCIgfSwgWwogICAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIkFjdHVhbGl0w6kiKV0pLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGFuIGhpcyBldGlhbSB0b3JxdWF0b3MuIFRvbGxpdCBzb2xlYXQgcGhhZWRydW0gdGUgZHVvLCBldW0gY3UgcmVjdGVxdWUgZXhwZXRlbmRpcyBuZWdsZWdlbnR1ci4gQ3UgbWVudGl0dW0gbWFpZXN0YXRpcyBwZXJzZXF1ZXJpcyBwcm8sIHByaSBwb25kZXJ1bSB0cmFjdGF0b3MgZWkuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNpbmdsZV9sZWZ0X2NvbG91bSBmbG9hdGxlZnQiIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImltZyIsCiAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvaW1hZ2VzL3dhZGUuanBnIiksIGFsdDogIk5vdGVib29rIiB9CiAgICAgIH0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRlbnQiIH0sIFsKICAgICAgICBfYygiaDIiLCBbX3ZtLl92KCJBY3R1YWxpdMOpIildKSwKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBhbiBoaXMgZXRpYW0gdG9ycXVhdG9zLiBUb2xsaXQgc29sZWF0IHBoYWVkcnVtIHRlIGR1bywgZXVtIGN1IHJlY3RlcXVlIGV4cGV0ZW5kaXMgbmVnbGVnZW50dXIuIEN1IG1lbnRpdHVtIG1haWVzdGF0aXMgcGVyc2VxdWVyaXMgcHJvLCBwcmkgcG9uZGVydW0gdHJhY3RhdG9zIGVpLiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}