{"remainingRequest":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\src\\components\\Left.vue?vue&type=template&id=3c83f0b7&scoped=true&","dependencies":[{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\src\\components\\Left.vue","mtime":1615723419569},{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615656863448},{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1615656908637},{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615656863448},{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1615656908637}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}