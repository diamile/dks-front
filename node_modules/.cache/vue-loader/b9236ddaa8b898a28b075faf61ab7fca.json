{"remainingRequest":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\src\\views\\Politique.vue?vue&type=template&id=209175b4&scoped=true&","dependencies":[{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\src\\views\\Politique.vue","mtime":1617310109830},{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615656863448},{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1615656908637},{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615656863448},{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1615656908637}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHN0YXRpY0NsYXNzOiAidy0xMDAiLCBzdGF0aWNTdHlsZTogeyAibWFyZ2luLXRvcCI6ICIyMHB4IiB9IH0sCiAgICBbCiAgICAgIF9jKCJoMiIsIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZSIgfSwgW192bS5fdigiUE9MSVRJUVVFIildKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0zMCIsIHN0YXRpY1N0eWxlOiB7IGhlaWdodDogIjUwcHgiIH0gfSksCiAgICAgIF92bS5fbChfdm0uaXRlbXMsIGZ1bmN0aW9uKHgpIHsKICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsKICAgICAgICAgICAga2V5OiB4LAogICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAibWF4LXctc2NyZWVuIG14LWF1dG8gc206cC0xMCByZWxhdGl2ZSB3LTEwMCBhcnRpY2xlcy1uZXdzIgogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsZzpmbGV4IiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsZzp3LTYvMTIiIH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgInJlbGF0aXZlIGgtZnVsbCB3LWZ1bGwgZmxleCBpdGVtcy1lbmQganVzdGlmeS1zdGFydCB0ZXh0LWxlZnQgYmctY292ZXIgYmctY2VudGVyIiwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAibWluLWhlaWdodCI6ICIzMDBweCIgfSwKICAgICAgICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgImJhY2tncm91bmQtaW1hZ2UiOgogICAgICAgICAgICAgICAgICAgICAgICAidXJsKCIgKyByZXF1aXJlKCIuLi9hc3NldHMvaW1hZ2VzL2VtZXV0ZTIuanBnIikgKyAiKSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICJhYnNvbHV0ZSB0b3AtMCBtdC0yMCByaWdodC0wIGJvdHRvbS0wIGxlZnQtMCBiZy1ncmFkaWVudC10by1iIGZyb20tdHJhbnNwYXJlbnQgdG8tZ3JheS05MDAiCiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDAsIHRydWUpLAogICAgICAgICAgICAgICAgICAgIF92bS5fbSgxLCB0cnVlKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJsZzp3LTYvMTIgbWQ6Z3JpZCBncmlkLWNvbHMtMiBncmlkLXJvd3MtMiIgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICJyZWxhdGl2ZSB3LWZ1bGwgZmxleCBpdGVtcy1lbmQganVzdGlmeS1zdGFydCB0ZXh0LWxlZnQgYmctY292ZXIgYmctY2VudGVyIiwKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJtaW4taGVpZ2h0IjogIjMwMHB4IiB9LAogICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImJhY2tncm91bmQtaW1hZ2UiOgogICAgICAgICAgICAgICAgICAgICAgICAgICJ1cmwoIiArIHJlcXVpcmUoIi4uL2Fzc2V0cy9pbWFnZXMvc29ua28uanBnIikgKyAiKSIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICJhYnNvbHV0ZSB0b3AtMCBtdC0yMCByaWdodC0wIGJvdHRvbS0wIGxlZnQtMCBiZy1ncmFkaWVudC10by1iIGZyb20tdHJhbnNwYXJlbnQgdG8tZ3JheS05MDAiCiAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSgyLCB0cnVlKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSgzLCB0cnVlKQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICJyZWxhdGl2ZSB3LWZ1bGwgZmxleCBpdGVtcy1lbmQganVzdGlmeS1zdGFydCB0ZXh0LWxlZnQgYmctY292ZXIgYmctY2VudGVyIiwKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJtaW4taGVpZ2h0IjogIjMwMHB4IiB9LAogICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImJhY2tncm91bmQtaW1hZ2UiOgogICAgICAgICAgICAgICAgICAgICAgICAgICJ1cmwoIiArIHJlcXVpcmUoIi4uL2Fzc2V0cy9pbWFnZXMvYWhtZWQuanBnIikgKyAiKSIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICJhYnNvbHV0ZSB0b3AtMCBtdC0yMCByaWdodC0wIGJvdHRvbS0wIGxlZnQtMCBiZy1ncmFkaWVudC10by1iIGZyb20tdHJhbnNwYXJlbnQgdG8tZ3JheS05MDAiCiAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSg0LCB0cnVlKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSg1LCB0cnVlKQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICJyZWxhdGl2ZSB3LWZ1bGwgZmxleCBpdGVtcy1lbmQganVzdGlmeS1zdGFydCB0ZXh0LWxlZnQgYmctY292ZXIgYmctY2VudGVyIiwKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJtaW4taGVpZ2h0IjogIjMwMHB4IiB9LAogICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImJhY2tncm91bmQtaW1hZ2UiOgogICAgICAgICAgICAgICAgICAgICAgICAgICJ1cmwoIiArIHJlcXVpcmUoIi4uL2Fzc2V0cy9pbWFnZXMvbGlmLmpwZyIpICsgIikiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAiYWJzb2x1dGUgdG9wLTAgbXQtMjAgcmlnaHQtMCBib3R0b20tMCBsZWZ0LTAgYmctZ3JhZGllbnQtdG8tYiBmcm9tLXRyYW5zcGFyZW50IHRvLWdyYXktOTAwIgogICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX20oNiwgdHJ1ZSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX20oNywgdHJ1ZSkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAicmVsYXRpdmUgdy1mdWxsIGZsZXggaXRlbXMtZW5kIGp1c3RpZnktc3RhcnQgdGV4dC1sZWZ0IGJnLWNvdmVyIGJnLWNlbnRlciIsCiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAibWluLWhlaWdodCI6ICIzMDBweCIgfSwKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJiYWNrZ3JvdW5kLWltYWdlIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAidXJsKCIgKyByZXF1aXJlKCIuLi9hc3NldHMvaW1hZ2VzL3dhZGUuanBnIikgKyAiKSIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICJhYnNvbHV0ZSB0b3AtMCBtdC0yMCByaWdodC0wIGJvdHRvbS0wIGxlZnQtMCBiZy1ncmFkaWVudC10by1iIGZyb20tdHJhbnNwYXJlbnQgdG8tZ3JheS05MDAiCiAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSg4LCB0cnVlKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSg5LCB0cnVlKQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIH0pLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogIm1heC13LXNjcmVlbi14bCBteC1hdXRvIHAtNSBzbTpwLTEwIG1kOnAtMTYiLAogICAgICAgICAgc3RhdGljU3R5bGU6IHsgIm1hcmdpbi10b3AiOiAiLTUwcHgiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgImdyaWQgZ3JpZC1jb2xzLTEgbWQ6Z3JpZC1jb2xzLTQgc206Z3JpZC1jb2xzLTIgZ2FwLTUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAicmVsYXRpdmUgdy1mdWxsIGZsZXggaXRlbXMtZW5kIGp1c3RpZnktc3RhcnQgdGV4dC1sZWZ0IGJnLWNvdmVyIGJnLWNlbnRlciIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IGhlaWdodDogIjQ1MHB4IiB9LAogICAgICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgICAgICJiYWNrZ3JvdW5kLWltYWdlIjoKICAgICAgICAgICAgICAgICAgICAgICJ1cmwoIiArIHJlcXVpcmUoIi4uL2Fzc2V0cy9pbWFnZXMvZW1ldXRlMi5qcGciKSArICIpIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgImFic29sdXRlIHRvcC0wIG10LTIwIHJpZ2h0LTAgYm90dG9tLTAgbGVmdC0wIGJnLWdyYWRpZW50LXRvLWIgZnJvbS10cmFuc3BhcmVudCB0by1ncmF5LTkwMCIKICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF92bS5fbSgxMCksCiAgICAgICAgICAgICAgICAgIF92bS5fbSgxMSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICJyZWxhdGl2ZSB3LWZ1bGwgZmxleCBpdGVtcy1lbmQganVzdGlmeS1zdGFydCB0ZXh0LWxlZnQgYmctY292ZXIgYmctY2VudGVyIiwKICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgaGVpZ2h0OiAiNDUwcHgiIH0sCiAgICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgImJhY2tncm91bmQtaW1hZ2UiOgogICAgICAgICAgICAgICAgICAgICAgInVybCgiICsgcmVxdWlyZSgiLi4vYXNzZXRzL2ltYWdlcy9zb25rby5qcGciKSArICIpIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgImFic29sdXRlIHRvcC0wIG10LTIwIHJpZ2h0LTAgYm90dG9tLTAgbGVmdC0wIGJnLWdyYWRpZW50LXRvLWIgZnJvbS10cmFuc3BhcmVudCB0by1ncmF5LTkwMCIKICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF92bS5fbSgxMiksCiAgICAgICAgICAgICAgICAgIF92bS5fbSgxMykKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICJyZWxhdGl2ZSB3LWZ1bGwgZmxleCBpdGVtcy1lbmQganVzdGlmeS1zdGFydCB0ZXh0LWxlZnQgYmctY292ZXIgYmctY2VudGVyIiwKICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgaGVpZ2h0OiAiNDUwcHgiIH0sCiAgICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgImJhY2tncm91bmQtaW1hZ2UiOgogICAgICAgICAgICAgICAgICAgICAgInVybCgiICsgcmVxdWlyZSgiLi4vYXNzZXRzL2ltYWdlcy9saWYuanBnIikgKyAiKSIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICJhYnNvbHV0ZSB0b3AtMCBtdC0yMCByaWdodC0wIGJvdHRvbS0wIGxlZnQtMCBiZy1ncmFkaWVudC10by1iIGZyb20tdHJhbnNwYXJlbnQgdG8tZ3JheS05MDAiCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX20oMTQpLAogICAgICAgICAgICAgICAgICBfdm0uX20oMTUpCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAicmVsYXRpdmUgdy1mdWxsIGZsZXggaXRlbXMtZW5kIGp1c3RpZnktc3RhcnQgdGV4dC1sZWZ0IGJnLWNvdmVyIGJnLWNlbnRlciIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IGhlaWdodDogIjQ1MHB4IiB9LAogICAgICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgICAgICJiYWNrZ3JvdW5kLWltYWdlIjoKICAgICAgICAgICAgICAgICAgICAgICJ1cmwoIiArIHJlcXVpcmUoIi4uL2Fzc2V0cy9pbWFnZXMvYWhtZWQuanBnIikgKyAiKSIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICJhYnNvbHV0ZSB0b3AtMCBtdC0yMCByaWdodC0wIGJvdHRvbS0wIGxlZnQtMCBiZy1ncmFkaWVudC10by1iIGZyb20tdHJhbnNwYXJlbnQgdG8tZ3JheS05MDAiCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX20oMTYpLAogICAgICAgICAgICAgICAgICBfdm0uX20oMTcpCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdCiAgICAgICAgICApCiAgICAgICAgXQogICAgICApLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImNvbnRhaW5lciBtdC00IG1iLTUiLAogICAgICAgICAgc3RhdGljU3R5bGU6IHsgIm1hcmdpbi10b3AiOiAiLTMwcHggIWltcG9ydGFudCIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicm93IiB9LAogICAgICAgICAgICBfdm0uX2woX3ZtLml0ZW1zLCBmdW5jdGlvbih4KSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9jKCJkaXYiLCB7IGtleTogeCwgc3RhdGljQ2xhc3M6ICJjb2wtbWQtMTIiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fbSgxOCwgdHJ1ZSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgMAogICAgICAgICAgKQogICAgICAgIF0KICAgICAgKQogICAgXSwKICAgIDIKICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiZGl2IiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgImFic29sdXRlIHRvcC0wIHJpZ2h0LTAgbGVmdC0wIG14LTYgbXQtNCBmbGV4IGp1c3RpZnktYmV0d2VlbiBpdGVtcy1jZW50ZXIiCiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgInRleHQteHMgYmctaW5kaWdvLTYwMCB0ZXh0LXdoaXRlIHVwcGVyY2FzZSBob3ZlcjpiZy13aGl0ZSBob3Zlcjp0ZXh0LWluZGlnby02MDAgdHJhbnNpdGlvbiBlYXNlLWluLW91dCBkdXJhdGlvbi01MDAgdGV4dC10aXRsZSIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiUG9saXRpY3MiKV0KICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dC13aGl0ZSBmb250LXJlZ3VsYXIgZmxleCBmbGV4LWNvbCBqdXN0aWZ5LXN0YXJ0IgogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LTN4bCBsZWFkaW5nLTAgZm9udC1zZW1pYm9sZCB0ZXh0LWRhdGUiIH0sCiAgICAgICAgICAgICAgW192bS5fdigiMjUiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiLW10LTMgdGV4dC1tb250aCIgfSwgW192bS5fdigiTWF5IildKQogICAgICAgICAgXQogICAgICAgICkKICAgICAgXQogICAgKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygibWFpbiIsIHsgc3RhdGljQ2xhc3M6ICJwLTggei0xMCBtYWluIiB9LCBbCiAgICAgIF9jKAogICAgICAgICJhIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgInRleHQteGwgdHJhY2tpbmctdGlnaHQgZm9udC1zZW1pYm9sZCBsZWFkaW5nLTcgbWItMyBpbmxpbmUtYmxvY2sgdGV4dC13aGl0ZSBob3Zlcjp1bmRlcmxpbmUgdGV4dC1wYXJhZ3JhcGhlIiwKICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgfSwKICAgICAgICBbX3ZtLl92KCJEci4gQWJkdWxsYWggQWJkdWxsYWgncyBQcmVzaWRlbnRpYWwgRWxlY3Rpb24gQ2FtcGFpZ24gIildCiAgICAgICksCiAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtZ3JheS0yMDAgdGV4dC14cyIgfSwgWwogICAgICAgIF92bS5fdigiIEJ5ICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogInRleHQtd2hpdGUgZm9udC1zZW1pYm9sZCBob3Zlcjp1bmRlcmxpbmUiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiIyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIkFobWFkIFN1bHRhbmkiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIHwgNSBtaW5zIHJlYWQgIikKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiZGl2IiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgImFic29sdXRlIHRvcC0wIHJpZ2h0LTAgbGVmdC0wIG14LTUgbXQtMiBmbGV4IGp1c3RpZnktYmV0d2VlbiBpdGVtcy1jZW50ZXIiCiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgInRleHQteHMgYmctaW5kaWdvLTYwMCB0ZXh0LXdoaXRlIHB4LTUgcHktMiB1cHBlcmNhc2UgaG92ZXI6Ymctd2hpdGUgaG92ZXI6dGV4dC1pbmRpZ28tNjAwIHRyYW5zaXRpb24gZWFzZS1pbi1vdXQgZHVyYXRpb24tNTAwIHRleHQtdGl0bGUtaXRlbSIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiUG9saXRpY3MiKV0KICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dC13aGl0ZSBmb250LXJlZ3VsYXIgZmxleCBmbGV4LWNvbCBqdXN0aWZ5LXN0YXJ0IgogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dC0zeGwgbGVhZGluZy0wIGZvbnQtc2VtaWJvbGQgdGV4dC1kYXRlLWl0ZW0iCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCIxMCIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICItbXQtMyB0ZXh0LW1vbnRoLWl0ZW0iIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIk1hciIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdCiAgICAgICAgKQogICAgICBdCiAgICApCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJtYWluIiwgeyBzdGF0aWNDbGFzczogInAtNSB6LTEwIiB9LCBbCiAgICAgIF9jKAogICAgICAgICJhIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgInRleHQtbWQgdHJhY2tpbmctdGlnaHQgZm9udC1tZWRpdW0gbGVhZGluZy03IGZvbnQtcmVndWxhciB0ZXh0LXdoaXRlIGhvdmVyOnVuZGVybGluZSB0ZXh0LXBhcmFncmFwaGUtaXRlbSIsCiAgICAgICAgICBhdHRyczogeyBocmVmOiAiIyIgfQogICAgICAgIH0sCiAgICAgICAgW192bS5fdigiQWZnaGFuaXN0YW4ncyBQcmVzaWRlbnQgQXNocmFmIEdoYW5pIFNwZWFrcyBBdCBUaGUgQ291bmNpbCAiKV0KICAgICAgKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7CiAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAiYWJzb2x1dGUgdG9wLTAgcmlnaHQtMCBsZWZ0LTAgbXgtNSBtdC0yIGZsZXgganVzdGlmeS1iZXR3ZWVuIGl0ZW1zLWNlbnRlciIKICAgICAgfSwKICAgICAgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAidGV4dC14cyBiZy1pbmRpZ28tNjAwIHRleHQtd2hpdGUgcHgtNSBweS0yIHVwcGVyY2FzZSBob3ZlcjpiZy13aGl0ZSBob3Zlcjp0ZXh0LWluZGlnby02MDAgdHJhbnNpdGlvbiBlYXNlLWluLW91dCBkdXJhdGlvbi01MDAgdGV4dC10aXRsZS1pdGVtIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJQb2xpdGljcyIpXQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0ZXh0LXdoaXRlIGZvbnQtcmVndWxhciBmbGV4IGZsZXgtY29sIGp1c3RpZnktc3RhcnQiCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0ZXh0LTN4bCBsZWFkaW5nLTAgZm9udC1zZW1pYm9sZCB0ZXh0LWRhdGUtaXRlbSIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIjIwIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIi1tdC0zIHRleHQtbW9udGgtaXRlbSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiSmFuIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoIm1haW4iLCB7IHN0YXRpY0NsYXNzOiAicC01IHotMTAiIH0sIFsKICAgICAgX2MoCiAgICAgICAgImEiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAidGV4dC1tZCB0cmFja2luZy10aWdodCBmb250LW1lZGl1bSBsZWFkaW5nLTcgZm9udC1yZWd1bGFyIHRleHQtd2hpdGUgaG92ZXI6dW5kZXJsaW5lIHRleHQtcGFyYWdyYXBoZS1pdGVtIiwKICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgfSwKICAgICAgICBbX3ZtLl92KCJNaWRkbGUgRWFzdCBQYXJ0aWNpcGFudHMgR2F0aGVyIEluIFdhcnNhdyAiKV0KICAgICAgKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7CiAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAiYWJzb2x1dGUgdG9wLTAgcmlnaHQtMCBsZWZ0LTAgbXgtNSBtdC0yIGZsZXgganVzdGlmeS1iZXR3ZWVuIGl0ZW1zLWNlbnRlciIKICAgICAgfSwKICAgICAgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAidGV4dC14cyBiZy1pbmRpZ28tNjAwIHRleHQtd2hpdGUgcHgtNSBweS0yIHVwcGVyY2FzZSBob3ZlcjpiZy13aGl0ZSBob3Zlcjp0ZXh0LWluZGlnby02MDAgdHJhbnNpdGlvbiBlYXNlLWluLW91dCBkdXJhdGlvbi01MDAgdGV4dC10aXRsZS1pdGVtIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJQb2xpdGljcyIpXQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0ZXh0LXdoaXRlIGZvbnQtcmVndWxhciBmbGV4IGZsZXgtY29sIGp1c3RpZnktc3RhcnQiCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0ZXh0LTN4bCBsZWFkaW5nLTAgZm9udC1zZW1pYm9sZCB0ZXh0LWRhdGUtaXRlbSIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIjI1IildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIi1tdC0zIHRleHQtbW9udGgtaXRlbSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiTWF5IikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoIm1haW4iLCB7IHN0YXRpY0NsYXNzOiAicC01IHotMTAiIH0sIFsKICAgICAgX2MoCiAgICAgICAgImEiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAidGV4dC1tZCB0cmFja2luZy10aWdodCBmb250LW1lZGl1bSBsZWFkaW5nLTcgZm9udC1yZWd1bGFyIHRleHQtd2hpdGUgaG92ZXI6dW5kZXJsaW5lIHRleHQtcGFyYWdyYXBoZS1pdGVtIiwKICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgfSwKICAgICAgICBbX3ZtLl92KCJBZmdoYW4gUHJlc2lkZW50IEFzaHJhZiBHaGFuaSBWaXNpdHMgSmFsYWxhYmFkIildCiAgICAgICkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiZGl2IiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgImFic29sdXRlIHRvcC0wIHJpZ2h0LTAgbGVmdC0wIG14LTUgbXQtMiBmbGV4IGp1c3RpZnktYmV0d2VlbiBpdGVtcy1jZW50ZXIiCiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgInRleHQteHMgYmctaW5kaWdvLTYwMCB0ZXh0LXdoaXRlIHB4LTUgcHktMiB1cHBlcmNhc2UgaG92ZXI6Ymctd2hpdGUgaG92ZXI6dGV4dC1pbmRpZ28tNjAwIHRyYW5zaXRpb24gZWFzZS1pbi1vdXQgZHVyYXRpb24tNTAwIHRleHQtdGl0bGUtaXRlbSIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiUG9saXRpY3MiKV0KICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dC13aGl0ZSBmb250LXJlZ3VsYXIgZmxleCBmbGV4LWNvbCBqdXN0aWZ5LXN0YXJ0IgogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dC0zeGwgbGVhZGluZy0wIGZvbnQtc2VtaWJvbGQgdGV4dC1kYXRlLWl0ZW0iCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCIyNSIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICItbXQtMyB0ZXh0LW1vbnRoLWl0ZW0iIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIk1heSIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdCiAgICAgICAgKQogICAgICBdCiAgICApCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJtYWluIiwgeyBzdGF0aWNDbGFzczogInAtNSB6LTEwIiB9LCBbCiAgICAgIF9jKAogICAgICAgICJhIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgInRleHQtbWQgdHJhY2tpbmctdGlnaHQgZm9udC1tZWRpdW0gbGVhZGluZy03IGZvbnQtcmVndWxhciB0ZXh0LXdoaXRlIGhvdmVyOnVuZGVybGluZSB0ZXh0LXBhcmFncmFwaGUtaXRlbSIsCiAgICAgICAgICBhdHRyczogeyBocmVmOiAiIyIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQ29mZmluIE9mIFNsYWluIEphcGFuZXNlIERvY3RvciBOYWthbXVyYSBUcmFuc3BvcnRlZCBUbyBKYXBhbiIKICAgICAgICAgICkKICAgICAgICBdCiAgICAgICkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiZGl2IiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgImFic29sdXRlIHRvcC0wIHJpZ2h0LTAgbGVmdC0wIG14LTUgbXQtMiBmbGV4IGp1c3RpZnktYmV0d2VlbiBpdGVtcy1jZW50ZXIiCiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgInRleHQteHMgYmctaW5kaWdvLTYwMCB0ZXh0LXdoaXRlIHB4LTUgcHktMiB1cHBlcmNhc2UgaG92ZXI6Ymctd2hpdGUgaG92ZXI6dGV4dC1pbmRpZ28tNjAwIHRyYW5zaXRpb24gZWFzZS1pbi1vdXQgZHVyYXRpb24tNTAwIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJQb2xpdGljcyIpXQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0ZXh0LXdoaXRlIGZvbnQtcmVndWxhciBmbGV4IGZsZXgtY29sIGp1c3RpZnktc3RhcnQiCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LTN4bCBsZWFkaW5nLTAgZm9udC1zZW1pYm9sZCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiMjUiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiLW10LTMiIH0sIFtfdm0uX3YoIk1heSIpXSkKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoIm1haW4iLCB7IHN0YXRpY0NsYXNzOiAicC01IHotMTAiIH0sIFsKICAgICAgX2MoCiAgICAgICAgImEiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAidGV4dC1tZCB0cmFja2luZy10aWdodCBmb250LW1lZGl1bSBsZWFkaW5nLTcgZm9udC1yZWd1bGFyIHRleHQtd2hpdGUgaG92ZXI6dW5kZXJsaW5lIiwKICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgfSwKICAgICAgICBbX3ZtLl92KCJEci4gQWJkdWxsYWggQWJkdWxsYWgncyBQcmVzaWRlbnRpYWwgRWxlY3Rpb24gQ2FtcGFpZ24gIildCiAgICAgICkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiZGl2IiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgImFic29sdXRlIHRvcC0wIHJpZ2h0LTAgbGVmdC0wIG14LTUgbXQtMiBmbGV4IGp1c3RpZnktYmV0d2VlbiBpdGVtcy1jZW50ZXIiCiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgInRleHQteHMgYmctaW5kaWdvLTYwMCB0ZXh0LXdoaXRlIHB4LTUgcHktMiB1cHBlcmNhc2UgaG92ZXI6Ymctd2hpdGUgaG92ZXI6dGV4dC1pbmRpZ28tNjAwIHRyYW5zaXRpb24gZWFzZS1pbi1vdXQgZHVyYXRpb24tNTAwIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJQb2xpdGljcyIpXQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0ZXh0LXdoaXRlIGZvbnQtcmVndWxhciBmbGV4IGZsZXgtY29sIGp1c3RpZnktc3RhcnQiCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LTN4bCBsZWFkaW5nLTAgZm9udC1zZW1pYm9sZCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiMTAiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiLW10LTMiIH0sIFtfdm0uX3YoIk1hciIpXSkKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoIm1haW4iLCB7IHN0YXRpY0NsYXNzOiAicC01IHotMTAiIH0sIFsKICAgICAgX2MoCiAgICAgICAgImEiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAidGV4dC1tZCB0cmFja2luZy10aWdodCBmb250LW1lZGl1bSBsZWFkaW5nLTcgZm9udC1yZWd1bGFyIHRleHQtd2hpdGUgaG92ZXI6dW5kZXJsaW5lIiwKICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgfSwKICAgICAgICBbX3ZtLl92KCJBZmdoYW5pc3RhbidzIFByZXNpZGVudCBBc2hyYWYgR2hhbmkgU3BlYWtzIEF0IFRoZSBDb3VuY2lsICIpXQogICAgICApCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImRpdiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICJhYnNvbHV0ZSB0b3AtMCByaWdodC0wIGxlZnQtMCBteC01IG10LTIgZmxleCBqdXN0aWZ5LWJldHdlZW4gaXRlbXMtY2VudGVyIgogICAgICB9LAogICAgICBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICJ0ZXh0LXhzIGJnLWluZGlnby02MDAgdGV4dC13aGl0ZSBweC01IHB5LTIgdXBwZXJjYXNlIGhvdmVyOmJnLXdoaXRlIGhvdmVyOnRleHQtaW5kaWdvLTYwMCB0cmFuc2l0aW9uIGVhc2UtaW4tb3V0IGR1cmF0aW9uLTUwMCIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiUG9saXRpY3MiKV0KICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dC13aGl0ZSBmb250LXJlZ3VsYXIgZmxleCBmbGV4LWNvbCBqdXN0aWZ5LXN0YXJ0IgogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidGV4dC0zeGwgbGVhZGluZy0wIGZvbnQtc2VtaWJvbGQiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjIwIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIi1tdC0zIiB9LCBbX3ZtLl92KCJKYW4iKV0pCiAgICAgICAgICBdCiAgICAgICAgKQogICAgICBdCiAgICApCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJtYWluIiwgeyBzdGF0aWNDbGFzczogInAtNSB6LTEwIiB9LCBbCiAgICAgIF9jKAogICAgICAgICJhIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgInRleHQtbWQgdHJhY2tpbmctdGlnaHQgZm9udC1tZWRpdW0gbGVhZGluZy03IGZvbnQtcmVndWxhciB0ZXh0LXdoaXRlIGhvdmVyOnVuZGVybGluZSIsCiAgICAgICAgICBhdHRyczogeyBocmVmOiAiIyIgfQogICAgICAgIH0sCiAgICAgICAgW192bS5fdigiTWlkZGxlIEVhc3QgUGFydGljaXBhbnRzIEdhdGhlciBJbiBXYXJzYXcgIildCiAgICAgICkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiZGl2IiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgImFic29sdXRlIHRvcC0wIHJpZ2h0LTAgbGVmdC0wIG14LTUgbXQtMiBmbGV4IGp1c3RpZnktYmV0d2VlbiBpdGVtcy1jZW50ZXIiCiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgInRleHQteHMgYmctaW5kaWdvLTYwMCB0ZXh0LXdoaXRlIHB4LTUgcHktMiB1cHBlcmNhc2UgaG92ZXI6Ymctd2hpdGUgaG92ZXI6dGV4dC1pbmRpZ28tNjAwIHRyYW5zaXRpb24gZWFzZS1pbi1vdXQgZHVyYXRpb24tNTAwIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJQb2xpdGljcyIpXQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0ZXh0LXdoaXRlIGZvbnQtcmVndWxhciBmbGV4IGZsZXgtY29sIGp1c3RpZnktc3RhcnQiCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LTN4bCBsZWFkaW5nLTAgZm9udC1zZW1pYm9sZCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiMjUiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiLW10LTMiIH0sIFtfdm0uX3YoIk1heSIpXSkKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoIm1haW4iLCB7IHN0YXRpY0NsYXNzOiAicC01IHotMTAiIH0sIFsKICAgICAgX2MoCiAgICAgICAgImEiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAidGV4dC1tZCB0cmFja2luZy10aWdodCBmb250LW1lZGl1bSBsZWFkaW5nLTcgZm9udC1yZWd1bGFyIHRleHQtd2hpdGUgaG92ZXI6dW5kZXJsaW5lIiwKICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgfSwKICAgICAgICBbX3ZtLl92KCJBZmdoYW4gUHJlc2lkZW50IEFzaHJhZiBHaGFuaSBWaXNpdHMgSmFsYWxhYmFkIildCiAgICAgICkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IGJnLXdoaXRlIHJvdW5kZWQgbXQtMyIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC0xIGJnLWFydGljbGUiIH0sIFsKICAgICAgICBfYygiaDIiLCBbX3ZtLl92KCJPY3QiKSwgX2MoImJyIiksIF9jKCJzdHJvbmciLCBbX3ZtLl92KCIyMyIpXSldKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNCBuby1wYWRkaW5nIiB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgInJlbGF0aXZlIHctZnVsbCBmbGV4IGl0ZW1zLWVuZCBqdXN0aWZ5LXN0YXJ0IHRleHQtbGVmdCBiZy1jb3ZlciBiZy1jZW50ZXIiLAogICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICJtaW4taGVpZ2h0IjogIjI2MHB4IiwKICAgICAgICAgICAgICAiYmFja2dyb3VuZC1pbWFnZSI6CiAgICAgICAgICAgICAgICAidXJsKGh0dHBzOi8vbWVkaWEuZ2V0dHlpbWFnZXMuY29tL3Bob3Rvcy9hdC10aGUtdGhlLW5ldHdvcmstdG9sby10ZWxldmlzZWQtZGViYXRlLWRyLWFiZHVsbGFoLWFiZHVsbGFoLXdpdGgtcGljdHVyZS1pZDExNzk2MTQwMzQ/az02Jm09MTE3OTYxNDAzNCZzPTYxMng2MTImdz0wJmg9V3dJWDNSTXNPUUVuNURvdkQ5SjNlODU5Q1pUZHhiSEhEM0hSeXJnVTNBOD0pIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgImFic29sdXRlIHRvcC0wIG10LTIwIHJpZ2h0LTAgYm90dG9tLTAgbGVmdC0wIGJnLWdyYWRpZW50LXRvLWIgZnJvbS10cmFuc3BhcmVudCB0by1ncmF5LTkwMCIKICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAiYWJzb2x1dGUgdG9wLTAgcmlnaHQtMCBsZWZ0LTAgbXgtNSBtdC0yIGZsZXgganVzdGlmeS1iZXR3ZWVuIGl0ZW1zLWNlbnRlciIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0LXhzIGJnLWluZGlnby02MDAgdGV4dC13aGl0ZSBweC01IHB5LTIgdXBwZXJjYXNlIGhvdmVyOmJnLXdoaXRlIGhvdmVyOnRleHQtaW5kaWdvLTYwMCB0cmFuc2l0aW9uIGVhc2UtaW4tb3V0IGR1cmF0aW9uLTUwMCIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMiIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiUG9saXRpY3MiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0LXdoaXRlIGZvbnQtcmVndWxhciBmbGV4IGZsZXgtY29sIGp1c3RpZnktc3RhcnQiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LTN4bCBsZWFkaW5nLTAgZm9udC1zZW1pYm9sZCIgfSwKICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIjI1IildCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICItbXQtMyIgfSwgW192bS5fdigiTWF5IildKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygibWFpbiIsIHsgc3RhdGljQ2xhc3M6ICJwLTUgei0xMCIgfSwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAidGV4dC1tZCB0cmFja2luZy10aWdodCBmb250LW1lZGl1bSBsZWFkaW5nLTcgZm9udC1yZWd1bGFyIHRleHQtd2hpdGUgaG92ZXI6dW5kZXJsaW5lIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiRHIuIEFiZHVsbGFoIEFiZHVsbGFoJ3MgUHJlc2lkZW50aWFsIEVsZWN0aW9uIENhbXBhaWduICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC03IHB5LTMiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtYmxvY2sgcHgtMyIgfSwgWwogICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogImNhcmQtdGl0bGUgbXQtMCIgfSwgWwogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtc2Vjb25kYXJ5IG1iLTAiIH0sIFsKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjEwMTUgQ2FsaWZvcm5pYSBBdmUsIExvcyBBbmdlbGVzIENBIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXNlY29uZGFyeSIgfSwgWwogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiNzowMCBwbSAtIDg6MDAgcG0iKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImNhcmQtdGV4dCIgfSwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBDb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbS4gIgogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJociIpLAogICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zZWNvbmRhcnkiLCBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigiUmVhZCBNb3JlICIpLAogICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJpY29uIGlvbi1hbmRyb2lkLWFycm93LWZvcndhcmQiIH0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}