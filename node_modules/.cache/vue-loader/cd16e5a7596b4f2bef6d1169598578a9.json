{"remainingRequest":"C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\src\\components\\static\\Footer.vue?vue&type=template&id=7b7b629c&scoped=true&","dependencies":[{"path":"C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\src\\components\\static\\Footer.vue","mtime":1616696457810},{"path":"C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9vdGVyLWRhcmsiIH0sIFsKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZCBteC01IiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IG1iLTQgIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNCBjb2wtc20tMTEgY29sLXhzLTExIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvb3Rlci10ZXh0IHB1bGwtbGVmdCIgfSwgWwogICAgICAgICAgICBfdm0uX20oMCksCiAgICAgICAgICAgIF92bS5fbSgxKSwKICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiBDb21tb2RpIG5vbiBwYXJpYXR1ciBudW1xdWFtIGFuaW1pIG5hbSBhdCBpbXBlZGl0IG9kaXQgbmlzaS4iCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wgaXRlbSBzb2NpYWwiIH0sIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImZvbnQtYXdlc29tZS1pY29uIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGljb246IHsgcHJlZml4OiAiZmFiIiwgaWNvbk5hbWU6ICJ0d2l0dGVyIiB9IH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImZvbnQtYXdlc29tZS1pY29uIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGljb246IHsgcHJlZml4OiAiZmFiIiwgaWNvbk5hbWU6ICJmYWNlYm9vayIgfSB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJmb250LWF3ZXNvbWUtaWNvbiIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiB7IHByZWZpeDogImZhYiIsIGljb25OYW1lOiAieW91dHViZSIgfSB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJmb250LWF3ZXNvbWUtaWNvbiIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiB7IHByZWZpeDogImZhYiIsIGljb25OYW1lOiAiaW5zdGFncmFtIiB9IH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC0yIGNvbC1zbS0xIGNvbC14cy0xIG1iLTIiIH0pLAogICAgICAgIF92bS5fbSgyKSwKICAgICAgICBfdm0uX20oMyksCiAgICAgICAgX3ZtLl9tKDQpCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImRpdmlkZXIgbWItNCIgfSksCiAgICAgIF92bS5fbSg1KQogICAgXSkKICBdKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImQtZmxleCIgfSwgWwogICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImZvb3QiLAogICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1hZ2VzL2Rrcy5qcGciKSwgYWx0OiAiIiB9CiAgICAgICAgfSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmxleC1jb2x1bW4gdGFnIiB9LCBbCiAgICAgIF9jKAogICAgICAgICJoNCIsCiAgICAgICAgeyBzdGF0aWNTdHlsZTogeyBjb2xvcjogIiMxNjE1MWEiLCAiYmFja2dyb3VuZC1jb2xvciI6ICIjOTU3YmRhIiB9IH0sCiAgICAgICAgW192bS5fdigiTCcgZXNzZW50aWVsIGRlIGwnaW5mb3JtYXRpb24iKV0KICAgICAgKSwKICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCIjIFNFTkVHQUwgIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtMiBjb2wtc20tNCBjb2wteHMtNCIgfSwgWwogICAgICBfYygiaDUiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGluZyIgfSwgW192bS5fdigiU2VydmljZXMiKV0pLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiSVQgQ29uc3VsdGluZyAtIildKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJEZXZlbG9wbWVudCIpXSksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQ2xvdWQiKV0pLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkRldk9wcyAmIFN1cHBvcnQiKV0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC0yIGNvbC1zbS00IGNvbC14cy00IiB9LCBbCiAgICAgIF9jKCJoNSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkaW5nIiB9LCBbX3ZtLl92KCJJbmR1c3RyaWVzIildKSwKICAgICAgX2MoInVsIiwgeyBzdGF0aWNDbGFzczogImNhcmQtdGV4dCIgfSwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkZpbmFuY2UiKV0pLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlB1YmxpYyBTZWN0b3IiKV0pLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlNtYXJ0IE9mZmljZSIpXSksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiUmV0YWlsIildKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtMiBjb2wtc20tNCBjb2wteHMtNCIgfSwgWwogICAgICBfYygiaDUiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGluZyIgfSwgW192bS5fdigiQ29tcGFueSIpXSksCiAgICAgIF9jKCJ1bCIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkLXRleHQiIH0sIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJBYm91dCBVcyIpXSksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQmxvZyIpXSksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQ29udGFjdCIpXSksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiSm9pbiBVcyIpXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiZGl2IiwKICAgICAgeyBzdGF0aWNDbGFzczogInJvdyIsIHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMTBweCIgfSB9LAogICAgICBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNiBjb2wtc20tNiBjb2wteHMtNiIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwdWxsLWxlZnQiIH0sIFsKICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtY29weXJpZ2h0IiB9KSwKICAgICAgICAgICAgICBfdm0uX3YoIiAyMDIwIHRoZXpwZGVzaWduIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNiBjb2wtc20tNiBjb2wteHMtNiIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwdWxsLXJpZ2h0IG1yLTQgZC1mbGV4IHBvbGljeSIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigiVGVybXMgb2YgVXNlIildKSwKICAgICAgICAgICAgX2MoImRpdiIsIFtfdm0uX3YoIlByaXZhY3kgUG9saWN5IildKSwKICAgICAgICAgICAgX2MoImRpdiIsIFtfdm0uX3YoIkNvb2tpZSBQb2xpY3kiKV0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0KICAgICkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}