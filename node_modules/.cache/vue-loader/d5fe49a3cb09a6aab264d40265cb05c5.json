{"remainingRequest":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\src\\components\\Politique\\Article2.vue?vue&type=template&id=4f352c0b&scoped=true&","dependencies":[{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\src\\components\\Politique\\Article2.vue","mtime":1616709347802},{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615656863448},{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1615656908637},{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615656863448},{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1615656908637}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICBbCiAgICAgIF9jKCJyb3V0ZXItbGluayIsIHsgYXR0cnM6IHsgdG86IHsgcGF0aDogIi9kZXRhaWwvIiArIDEyMyB9IH0gfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2luZ2xlX2xlZnRfY29sb3VtIGZsb2F0bGVmdCIgfSwgWwogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWciLAogICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWFnZXMva2hhbGlmYS5qcGciKSwgYWx0OiAiIiB9CiAgICAgICAgICB9KSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudCIgfSwgWwogICAgICAgICAgICBfYygiaDIiLCBbX3ZtLl92KCJBY3R1YWxpdMOpIildKSwKICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBhbiBoaXMgZXRpYW0gdG9ycXVhdG9zLiBUb2xsaXQgc29sZWF0IHBoYWVkcnVtIHRlIGR1bywgZXVtIGN1IHJlY3RlcXVlIGV4cGV0ZW5kaXMgbmVnbGVnZW50dXIuIEN1IG1lbnRpdHVtIG1haWVzdGF0aXMgcGVyc2VxdWVyaXMgcHJvLCBwcmkgcG9uZGVydW0gdHJhY3RhdG9zIGVpLiIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX20oMCksCiAgICAgIF92bS5fbSgxKSwKICAgICAgX3ZtLl9tKDIpCiAgICBdLAogICAgMQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzaW5nbGVfbGVmdF9jb2xvdW0gZmxvYXRsZWZ0IiB9LCBbCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWciLAogICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltYWdlcy9zb25rby5qcGciKSwgYWx0OiAiIiB9CiAgICAgIH0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRlbnQiIH0sIFsKICAgICAgICBfYygiaDIiLCBbX3ZtLl92KCJBY3R1YWxpdMOpIildKSwKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBhbiBoaXMgZXRpYW0gdG9ycXVhdG9zLiBUb2xsaXQgc29sZWF0IHBoYWVkcnVtIHRlIGR1bywgZXVtIGN1IHJlY3RlcXVlIGV4cGV0ZW5kaXMgbmVnbGVnZW50dXIuIEN1IG1lbnRpdHVtIG1haWVzdGF0aXMgcGVyc2VxdWVyaXMgcHJvLCBwcmkgcG9uZGVydW0gdHJhY3RhdG9zIGVpLiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzaW5nbGVfbGVmdF9jb2xvdW0gZmxvYXRsZWZ0IiB9LCBbCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWciLAogICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltYWdlcy93YWRlLmpwZyIpLCBhbHQ6ICIiIH0KICAgICAgfSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudCIgfSwgWwogICAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIkFjdHVhbGl0w6kiKV0pLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGFuIGhpcyBldGlhbSB0b3JxdWF0b3MuIFRvbGxpdCBzb2xlYXQgcGhhZWRydW0gdGUgZHVvLCBldW0gY3UgcmVjdGVxdWUgZXhwZXRlbmRpcyBuZWdsZWdlbnR1ci4gQ3UgbWVudGl0dW0gbWFpZXN0YXRpcyBwZXJzZXF1ZXJpcyBwcm8sIHByaSBwb25kZXJ1bSB0cmFjdGF0b3MgZWkuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNpbmdsZV9sZWZ0X2NvbG91bSBmbG9hdGxlZnQiIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImltZyIsCiAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1hZ2VzL2FobWVkLmpwZyIpLCBhbHQ6ICIiIH0KICAgICAgfSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudCIgfSwgWwogICAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIkFjdHVhbGl0w6kiKV0pLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGFuIGhpcyBldGlhbSB0b3JxdWF0b3MuIFRvbGxpdCBzb2xlYXQgcGhhZWRydW0gdGUgZHVvLCBldW0gY3UgcmVjdGVxdWUgZXhwZXRlbmRpcyBuZWdsZWdlbnR1ci4gQ3UgbWVudGl0dW0gbWFpZXN0YXRpcyBwZXJzZXF1ZXJpcyBwcm8sIHByaSBwb25kZXJ1bSB0cmFjdGF0b3MgZWkuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}