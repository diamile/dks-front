{"remainingRequest":"C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\src\\components\\static\\Popular.vue?vue&type=template&id=19ec4e28&scoped=true&","dependencies":[{"path":"C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\src\\components\\static\\Popular.vue","mtime":1617619920824},{"path":"C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\diami\\Desktop\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2luZ2xlX3NpZGViYXIiIH0sIFsKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicG9wdWxhciIgfSwgWwogICAgICBfYygiaDIiLCB7IHN0YXRpY0NsYXNzOiAidGl0bGUiIH0sIFtfdm0uX3YoIlBvcHVsYXIiKV0pLAogICAgICBfYygKICAgICAgICAidWwiLAogICAgICAgIF92bS5fbChfdm0uaXRlbXMsIGZ1bmN0aW9uKHgpIHsKICAgICAgICAgIHJldHVybiBfYygibGkiLCB7IGtleTogeCwgc3RhdGljQ2xhc3M6ICJpdGVtLWFzaWRlIiB9LCBbCiAgICAgICAgICAgIF9jKCJmaWd1cmUiLCB7IHN0YXRpY0NsYXNzOiAic25pcDE1MjciIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImltYWdlIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltYWdlcy9haG1lZDIucG5nIiksCiAgICAgICAgICAgICAgICAgICAgYWx0OiAicHItc2FtcGxlMjMiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX3ZtLl9tKDAsIHRydWUpLAogICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiIyIgfSB9KQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICB9KSwKICAgICAgICAwCiAgICAgICksCiAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogInBvcHVsYXJfbW9yZSIgfSwgW192bS5fdigibW9yZSIpXSkKICAgIF0pCiAgXSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImZpZ2NhcHRpb24iLCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZGF0ZSIgfSwgWwogICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImRheSIgfSwgW192bS5fdigiMjgiKV0pLAogICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIm1vbnRoIiB9LCBbX3ZtLl92KCJOb3YiKV0pCiAgICAgIF0pLAogICAgICBfYygiaDMiLCBbX3ZtLl92KCIgQWNlciBBc3BpcmUgNyBHYW1pbmcgTGFwdG9wIildKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiAiCiAgICAgICAgKQogICAgICBdKQogICAgXSkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}