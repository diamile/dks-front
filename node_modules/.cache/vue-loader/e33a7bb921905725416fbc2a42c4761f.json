{"remainingRequest":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\src\\components\\Article2.vue?vue&type=template&id=0dc7942c&scoped=true&","dependencies":[{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\src\\components\\Article2.vue","mtime":1616448388422},{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615656863448},{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1615656908637},{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615656863448},{"path":"C:\\Users\\diami\\OneDrive\\Bureau\\dakarspectatornews\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1615656908637}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiA8ZGl2IGNsYXNzPSJzaW5nbGVfbGVmdF9jb2xvdW1fd3JhcHBlciIgc3R5bGU9ImRpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47aGVpZ2h0OmF1dG8iPgogICAgICAgICAgICA8aDIgY2xhc3M9InRpdGxlIj5QT0xJVElRVUU8L2gyPgogICAgICAgICAgICA8YSBjbGFzcz0ibW9yZSIgaHJlZj0iIyI+bW9yZTwvYT4KCiAgPGRpdj4KICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWltYWdlIiBzdHlsZT0iYmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0IiAgOnN0eWxlPSJ7J2JhY2tncm91bmQtaW1hZ2UnOiAndXJsKCcgKyByZXF1aXJlKCcuLi9hc3NldHMvaW1hZ2VzL2JhcnRoLmpwZycpICsgJyknfSI+CiAgCiAgCiAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1jb250ZW50Ij4KICAgIDxkaXYgY2xhc3M9ImFydGljbGUtaGVhZGVyIHNpdGUtbWFpbiI+CiAgICAgIDxkaXYgY2xhc3M9ImVudHJ5LWNhdHMiPgogICAgICAgIDxhPlBvbGl0aXF1ZTwvYT4KICAgICAgPC9kaXY+CiAgICAgIDxoMSBjbGFzcz0iZW50cnktdGl0bGUiPkZhc2hpb246IFRoZSBFc3NlbnRpYWwgR3VpZGUgdG8gU3ByaW5nIGFuZCBTdW1tZXI8L2gxPgogICAgICA8ZGl2IGNsYXNzPSJhdXRob3IiPgogICAgICAgIDxhIGNsYXNzPSJhdmF0YXIiPgogICAgICAgICAgPGltZyBoZWlnaHQ9IjgwIiB3aWR0aD0iODAiIHNyYz0iaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvcmVkdmVsdmV0L2ltYWdlcy82LzY1L1JlZF9WZWx2ZXRfSXJlbmVfVGhlX1BlcmZlY3RfUmVkX1ZlbHZldF9wcm9tb19waWN0dXJlXzIuUE5HL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE4MDEyNzE5MzQ0NyIvPgogICAgICAgIDwvYT4KICAgICAgICA8ZGl2IGNsYXNzPSJpbm5lci1tZXRhIj4KICAgICAgICAgIDxzcGFuPkJ5IDxhIGNsYXNzPSJjcmVhdGVkLWJ5Ij5JcmVuZTwvYT48L3NwYW4+CiAgICAgICAgICA8cCBjbGFzcz0iY3JlYXRlZC1hdCI+RmVicnVhcnkgMDUsIDIwMTg8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICAKICAgIAogIDwvZGl2PgogIDwvZGl2PgogIDxkaXYgc3R5bGU9Im1hcmdpbi10b3A6MzBweCI+CiAgICBOdW5jIHNlbSBuaXNsLCBzb2xsaWNpdHVkaW4gc2VkIGltcGVyZGlldCBpZCwgZmVybWVudHVtIHF1aXMgbG9yZW0uIFF1aXNxdWUgYXJjdSBwdXJ1cywgbGFvcmVldCBub24gY29uc2VjdGV0dXIgc2l0IGFtZXQsIG9ybmFyZSBpbiBsZWN0dXMuIE51bGxhIHBvcnRhIHZlbCB0b3J0b3IgZmVybWVudHVtIHBlbGxlbnRlc3F1ZS4gTWFlY2VuYXMgc2VkIGVzdCBtYWduYS4gRnVzY2UgdXQgZGljdHVtIGV4LiBRdWlzcXVlIGZyaW5naWxsYSB0ZW1wdXMgc2FwaWVuLCBpbiBlZ2VzdGFzIGF1Z3VlIGF1Y3RvciBzZWQuIENsYXNzIGFwdGVudCB0YWNpdGkgc29jaW9zcXUgYWQgbGl0b3JhIHRvcnF1ZW50IHBlciBjb251YmlhIG5vc3RyYSwgcGVyIGluY2VwdG9zIGhpbWVuYWVvcy4gVXQgbG9ib3J0aXMgaGVuZHJlcml0IGxhY2luaWEuCgpOdW5jIGNvbmRpbWVudHVtIHZlbGl0IG1hbGVzdWFkYSBwb3J0dGl0b3IgaW1wZXJkaWV0LiBQcm9pbiBpYWN1bGlzIGxhY3VzIGF0IHZlbmVuYXRpcyBjb21tb2RvLiBVdCBub24gaXBzdW0gdWxsYW1jb3JwZXIgaXBzdW0gY29tbW9kbyBsYWNpbmlhIHNhZ2l0dGlzIHF1aXMgbGVjdHVzLiBOYW0gbW9sbGlzIHNlbXBlciBtYXVyaXMsIGV1IHNlbXBlciBuaWJoIHZlc3RpYnVsdW0gc2VkLiBEb25lYyBhdWd1ZSBlbGl0LCBwbGFjZXJhdCBldCBtYXVyaXMgdmVsLCBmaW5pYnVzIHZlc3RpYnVsdW0gbGVvLiBQZWxsZW50ZXNxdWUgYWxpcXVhbSB1bHRyaWNpZXMgZG9sb3Igbm9uIGZyaW5naWxsYS4gTnVsbGEgcG9zdWVyZSBzb2xsaWNpdHVkaW4gZWZmaWNpdHVyLiBOdWxsYW0gZmV1Z2lhdCBjdXJzdXMgaW1wZXJkaWV0LiBWaXZhbXVzIGZhdWNpYnVzIGxpZ3VsYSB0dXJwaXMsIHNvbGxpY2l0dWRpbiBjb252YWxsaXMgbWFzc2EgcG9zdWVyZSBub24uIFBoYXNlbGx1cyBzaXQgYW1ldCB2aXZlcnJhIGxpZ3VsYS4gUHJhZXNlbnQgbm9uIHNlbSBmZXJtZW50dW0sIHZvbHV0cGF0IGxvcmVtIHZlbCwgcG9zdWVyZSBlcmF0LiBNb3JiaSBzZWQgZGlhbSBmZXVnaWF0LCBkaWduaXNzaW0gcHVydXMgc2VkLCBlbGVtZW50dW0gbWF1cmlzLiBDcmFzIG1vbGxpcyBsZW8gbm9uIGFsaXF1YW0gbHVjdHVzLgoKQ3JhcyBpZCBkaWFtIGxhb3JlZXQgbGlndWxhIG1hbGVzdWFkYSBmaW5pYnVzLiBTdXNwZW5kaXNzZSB2aXZlcnJhIG1hdXJpcyBlc3QsIGF0IHZlbmVuYXRpcyBkb2xvciBlbGVtZW50dW0gYXQuIEFlbmVhbiBzaXQgYW1ldCBsb3JlbSBpbiBtYXVyaXMgbG9ib3J0aXMgdHJpc3RpcXVlLiBWaXZhbXVzIGluIHBvcnR0aXRvciBuaXNsLCBhYyBpbXBlcmRpZXQgZWxpdC4gTmFtIG5vbiBleCBjb25ndWUsIHZhcml1cyBlcm9zIHByZXRpdW0sIGZhdWNpYnVzIHNlbS4gTmFtIHNvZGFsZXMgcG9ydGEgZW5pbSBhIG1heGltdXMuIE51bGxhIGZhY2lsaXNpLiBOdWxsYSBlZmZpY2l0dXIgcmlzdXMgY29tbW9kbyBlZ2VzdGFzIGVmZmljaXR1ci4gSW4gaGFjIGhhYml0YXNzZSBwbGF0ZWEgZGljdHVtc3QuIE1hdXJpcyBtb2xsaXMgYXVndWUgdGVsbHVzLCBhdCBwb3J0dGl0b3IgdXJuYSBmcmluZ2lsbGEgZWdldC4gTmFtIHNpdCBhbWV0IHJ1dHJ1bSBpcHN1bS4gUXVpc3F1ZSBhYyBwbGFjZXJhdCBlbGl0LCBhIGJpYmVuZHVtIHB1cnVzLiBEdWlzIGZhY2lsaXNpcyBzYXBpZW4gbmlzaSwgaW4gbWF4aW11cyBpcHN1bSBsb2JvcnRpcyB1dC4gUHJvaW4gcmhvbmN1cyBlbGl0IHBlbGxlbnRlc3F1ZSwgaWFjdWxpcyB0ZWxsdXMgZXUsIHZlaGljdWxhIHRvcnRvci4gTWFlY2VuYXMgbmVjIG9yY2kgYXQgbmliaCBsYW9yZWV0IGltcGVyZGlldC4KIDwvZGl2PgogPC9kaXY+CgogIDxkaXYgc3R5bGU9Im1hcmdpbi10b3A6NTBweCI+CiAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pbWFnZSIgc3R5bGU9ImJhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdCIgOnN0eWxlPSJ7J2JhY2tncm91bmQtaW1hZ2UnOiAndXJsKCcgKyByZXF1aXJlKCcuLi9hc3NldHMvaW1hZ2VzL2Jsb25kaW4uanBlZycpICsgJyknfSI+CiAgCiAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1jb250ZW50Ij4KICAgIDxkaXYgY2xhc3M9ImFydGljbGUtaGVhZGVyIHNpdGUtbWFpbiI+CiAgICAgIDxkaXYgY2xhc3M9ImVudHJ5LWNhdHMiPgogICAgICAgIDxhPlBvbGl0aXF1ZTwvYT4KICAgICAgPC9kaXY+CiAgICAgIDxoMSBjbGFzcz0iZW50cnktdGl0bGUiPkZhc2hpb246IFRoZSBFc3NlbnRpYWwgR3VpZGUgdG8gU3ByaW5nIGFuZCBTdW1tZXI8L2gxPgogICAgICA8ZGl2IGNsYXNzPSJhdXRob3IiPgogICAgICAgIDxhIGNsYXNzPSJhdmF0YXIiPgogICAgICAgICAgPGltZyBoZWlnaHQ9IjgwIiB3aWR0aD0iODAiIHNyYz0iaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvcmVkdmVsdmV0L2ltYWdlcy82LzY1L1JlZF9WZWx2ZXRfSXJlbmVfVGhlX1BlcmZlY3RfUmVkX1ZlbHZldF9wcm9tb19waWN0dXJlXzIuUE5HL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE4MDEyNzE5MzQ0NyIvPgogICAgICAgIDwvYT4KICAgICAgICA8ZGl2IGNsYXNzPSJpbm5lci1tZXRhIj4KICAgICAgICAgIDxzcGFuPkJ5IDxhIGNsYXNzPSJjcmVhdGVkLWJ5Ij5JcmVuZTwvYT48L3NwYW4+CiAgICAgICAgICA8cCBjbGFzcz0iY3JlYXRlZC1hdCI+RmVicnVhcnkgMDUsIDIwMTg8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICAKICAgIAogIDwvZGl2PgogIDwvZGl2PgogIDxkaXYgc3R5bGU9Im1hcmdpbi10b3A6MzBweCI+CgogICAgQ3JhcyBpZCBkaWFtIGxhb3JlZXQgbGlndWxhIG1hbGVzdWFkYSBmaW5pYnVzLiBTdXNwZW5kaXNzZSB2aXZlcnJhIG1hdXJpcyBlc3QsIGF0IHZlbmVuYXRpcyBkb2xvciBlbGVtZW50dW0gYXQuIEFlbmVhbiBzaXQgYW1ldCBsb3JlbSBpbiBtYXVyaXMgbG9ib3J0aXMgdHJpc3RpcXVlLiBWaXZhbXVzIGluIHBvcnR0aXRvciBuaXNsLCBhYyBpbXBlcmRpZXQgZWxpdC4gTmFtIG5vbiBleCBjb25ndWUsIHZhcml1cyBlcm9zIHByZXRpdW0sIGZhdWNpYnVzIHNlbS4gTmFtIHNvZGFsZXMgcG9ydGEgZW5pbSBhIG1heGltdXMuIE51bGxhIGZhY2lsaXNpLiBOdWxsYSBlZmZpY2l0dXIgcmlzdXMgY29tbW9kbyBlZ2VzdGFzIGVmZmljaXR1ci4gSW4gaGFjIGhhYml0YXNzZSBwbGF0ZWEgZGljdHVtc3QuIE1hdXJpcyBtb2xsaXMgYXVndWUgdGVsbHVzLCBhdCBwb3J0dGl0b3IgdXJuYSBmcmluZ2lsbGEgZWdldC4gTmFtIHNpdCBhbWV0IHJ1dHJ1bSBpcHN1bS4gUXVpc3F1ZSBhYyBwbGFjZXJhdCBlbGl0LCBhIGJpYmVuZHVtIHB1cnVzLiBEdWlzIGZhY2lsaXNpcyBzYXBpZW4gbmlzaSwgaW4gbWF4aW11cyBpcHN1bSBsb2JvcnRpcyB1dC4gUHJvaW4gcmhvbmN1cyBlbGl0IHBlbGxlbnRlc3F1ZSwgaWFjdWxpcyB0ZWxsdXMgZXUsIHZlaGljdWxhIHRvcnRvci4gTWFlY2VuYXMgbmVjIG9yY2kgYXQgbmliaCBsYW9yZWV0IGltcGVyZGlldC4KClBoYXNlbGx1cyB0b3J0b3Igc2VtLCBydXRydW0gZWxlbWVudHVtIG51bmMgZXQsIHRyaXN0aXF1ZSBmZXVnaWF0IGVuaW0uIFNlZCBkdWkgZXJhdCwgYmxhbmRpdCB1dCBudWxsYSBuZWMsIGZldWdpYXQgbGFvcmVldCB1cm5hLiBEdWlzIGV1IGludGVyZHVtIGxvcmVtLiBTdXNwZW5kaXNzZSBsdWN0dXMgZWxpdCB2ZWwgbGlndWxhIG1vbGxpcywgdmVsIGVnZXN0YXMgb3JjaSBjb25ndWUuIE1vcmJpIGZpbmlidXMgYXJjdSBldCBwb3J0dGl0b3IgYmxhbmRpdC4gRG9uZWMgY29uZGltZW50dW0gc2FwaWVuIG5lYyBudWxsYSB2aXZlcnJhIHBvc3VlcmUuIFN1c3BlbmRpc3NlIHJpc3VzIGRvbG9yLCBtb2xsaXMgbmVjIG5pYmggdml0YWUsIHZpdmVycmEgbW9sZXN0aWUgZmVsaXMuCiA8L2Rpdj4KIDwvZGl2PgoKIDxkaXYgc3R5bGU9Im1hcmdpbi10b3A6NTBweCI+CiAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pbWFnZSIgIHN0eWxlPSJiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7YmFja2dyb3VuZC1zaXplOmNvdmVyIiA6c3R5bGU9InsnYmFja2dyb3VuZC1pbWFnZSc6ICd1cmwoJyArIHJlcXVpcmUoJy4uL2Fzc2V0cy9pbWFnZXMvbGlmMi5qcGcnKSArICcpJ30iPgogIAogIDxkaXYgY2xhc3M9ImFydGljbGUtY29udGVudCI+CiAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWhlYWRlciBzaXRlLW1haW4iPgogICAgICA8ZGl2IGNsYXNzPSJlbnRyeS1jYXRzIj4KICAgICAgICA8YT5Qb2xpdGlxdWU8L2E+CiAgICAgIDwvZGl2PgogICAgICA8aDEgY2xhc3M9ImVudHJ5LXRpdGxlIj5GYXNoaW9uOiBUaGUgRXNzZW50aWFsIEd1aWRlIHRvIFNwcmluZyBhbmQgU3VtbWVyPC9oMT4KICAgICAgPGRpdiBjbGFzcz0iYXV0aG9yIj4KICAgICAgICA8YSBjbGFzcz0iYXZhdGFyIj4KICAgICAgICAgIDxpbWcgaGVpZ2h0PSI4MCIgd2lkdGg9IjgwIiBzcmM9Imh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3JlZHZlbHZldC9pbWFnZXMvNi82NS9SZWRfVmVsdmV0X0lyZW5lX1RoZV9QZXJmZWN0X1JlZF9WZWx2ZXRfcHJvbW9fcGljdHVyZV8yLlBORy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxODAxMjcxOTM0NDciLz4KICAgICAgICA8L2E+CiAgICAgICAgPGRpdiBjbGFzcz0iaW5uZXItbWV0YSI+CiAgICAgICAgICA8c3Bhbj5CeSA8YSBjbGFzcz0iY3JlYXRlZC1ieSI+SXJlbmU8L2E+PC9zcGFuPgogICAgICAgICAgPHAgY2xhc3M9ImNyZWF0ZWQtYXQiPkZlYnJ1YXJ5IDA1LCAyMDE4PC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgCiAgICAKICA8L2Rpdj4KICA8L2Rpdj4KICA8ZGl2IHN0eWxlPSJtYXJnaW4tdG9wOjMwcHgiPgoKICAgIENyYXMgaWQgZGlhbSBsYW9yZWV0IGxpZ3VsYSBtYWxlc3VhZGEgZmluaWJ1cy4gU3VzcGVuZGlzc2Ugdml2ZXJyYSBtYXVyaXMgZXN0LCBhdCB2ZW5lbmF0aXMgZG9sb3IgZWxlbWVudHVtIGF0LiBBZW5lYW4gc2l0IGFtZXQgbG9yZW0gaW4gbWF1cmlzIGxvYm9ydGlzIHRyaXN0aXF1ZS4gVml2YW11cyBpbiBwb3J0dGl0b3IgbmlzbCwgYWMgaW1wZXJkaWV0IGVsaXQuIE5hbSBub24gZXggY29uZ3VlLCB2YXJpdXMgZXJvcyBwcmV0aXVtLCBmYXVjaWJ1cyBzZW0uIE5hbSBzb2RhbGVzIHBvcnRhIGVuaW0gYSBtYXhpbXVzLiBOdWxsYSBmYWNpbGlzaS4gTnVsbGEgZWZmaWNpdHVyIHJpc3VzIGNvbW1vZG8gZWdlc3RhcyBlZmZpY2l0dXIuIEluIGhhYyBoYWJpdGFzc2UgcGxhdGVhIGRpY3R1bXN0LiBNYXVyaXMgbW9sbGlzIGF1Z3VlIHRlbGx1cywgYXQgcG9ydHRpdG9yIHVybmEgZnJpbmdpbGxhIGVnZXQuIE5hbSBzaXQgYW1ldCBydXRydW0gaXBzdW0uIFF1aXNxdWUgYWMgcGxhY2VyYXQgZWxpdCwgYSBiaWJlbmR1bSBwdXJ1cy4gRHVpcyBmYWNpbGlzaXMgc2FwaWVuIG5pc2ksIGluIG1heGltdXMgaXBzdW0gbG9ib3J0aXMgdXQuIFByb2luIHJob25jdXMgZWxpdCBwZWxsZW50ZXNxdWUsIGlhY3VsaXMgdGVsbHVzIGV1LCB2ZWhpY3VsYSB0b3J0b3IuIE1hZWNlbmFzIG5lYyBvcmNpIGF0IG5pYmggbGFvcmVldCBpbXBlcmRpZXQuCgpQaGFzZWxsdXMgdG9ydG9yIHNlbSwgcnV0cnVtIGVsZW1lbnR1bSBudW5jIGV0LCB0cmlzdGlxdWUgZmV1Z2lhdCBlbmltLiBTZWQgZHVpIGVyYXQsIGJsYW5kaXQgdXQgbnVsbGEgbmVjLCBmZXVnaWF0IGxhb3JlZXQgdXJuYS4gRHVpcyBldSBpbnRlcmR1bSBsb3JlbS4gU3VzcGVuZGlzc2UgbHVjdHVzIGVsaXQgdmVsIGxpZ3VsYSBtb2xsaXMsIHZlbCBlZ2VzdGFzIG9yY2kgY29uZ3VlLiBNb3JiaSBmaW5pYnVzIGFyY3UgZXQgcG9ydHRpdG9yIGJsYW5kaXQuIERvbmVjIGNvbmRpbWVudHVtIHNhcGllbiBuZWMgbnVsbGEgdml2ZXJyYSBwb3N1ZXJlLiBTdXNwZW5kaXNzZSByaXN1cyBkb2xvciwgbW9sbGlzIG5lYyBuaWJoIHZpdGFlLCB2aXZlcnJhIG1vbGVzdGllIGZlbGlzLgogPC9kaXY+CiA8L2Rpdj4KCiA8ZGl2IHN0eWxlPSJtYXJnaW4tdG9wOjUwcHgiPgogIDxkaXYgY2xhc3M9ImZlYXR1cmUtaW1hZ2UiIHN0eWxlPSJiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7YmFja2dyb3VuZC1zaXplOmNvdmVyIiA6c3R5bGU9InsnYmFja2dyb3VuZC1pbWFnZSc6ICd1cmwoJyArIHJlcXVpcmUoJy4uL2Fzc2V0cy9pbWFnZXMvd2FkZTEuanBnJykgKyAnKSd9Ij4KICAKICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWNvbnRlbnQiPgogICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1oZWFkZXIgc2l0ZS1tYWluIj4KICAgICAgPGRpdiBjbGFzcz0iZW50cnktY2F0cyI+CiAgICAgICAgPGE+UG9saXRpcXVlPC9hPgogICAgICA8L2Rpdj4KICAgICAgPGgxIGNsYXNzPSJlbnRyeS10aXRsZSI+RmFzaGlvbjogVGhlIEVzc2VudGlhbCBHdWlkZSB0byBTcHJpbmcgYW5kIFN1bW1lcjwvaDE+CiAgICAgIDxkaXYgY2xhc3M9ImF1dGhvciI+CiAgICAgICAgPGEgY2xhc3M9ImF2YXRhciI+CiAgICAgICAgICA8aW1nIGhlaWdodD0iODAiIHdpZHRoPSI4MCIgc3JjPSJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC9yZWR2ZWx2ZXQvaW1hZ2VzLzYvNjUvUmVkX1ZlbHZldF9JcmVuZV9UaGVfUGVyZmVjdF9SZWRfVmVsdmV0X3Byb21vX3BpY3R1cmVfMi5QTkcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTgwMTI3MTkzNDQ3Ii8+CiAgICAgICAgPC9hPgogICAgICAgIDxkaXYgY2xhc3M9ImlubmVyLW1ldGEiPgogICAgICAgICAgPHNwYW4+QnkgPGEgY2xhc3M9ImNyZWF0ZWQtYnkiPklyZW5lPC9hPjwvc3Bhbj4KICAgICAgICAgIDxwIGNsYXNzPSJjcmVhdGVkLWF0Ij5GZWJydWFyeSAwNSwgMjAxODwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIAogICAgCiAgPC9kaXY+CiAgPC9kaXY+CiAgPGRpdiBzdHlsZT0ibWFyZ2luLXRvcDozMHB4Ij4KCiAgICBDcmFzIGlkIGRpYW0gbGFvcmVldCBsaWd1bGEgbWFsZXN1YWRhIGZpbmlidXMuIFN1c3BlbmRpc3NlIHZpdmVycmEgbWF1cmlzIGVzdCwgYXQgdmVuZW5hdGlzIGRvbG9yIGVsZW1lbnR1bSBhdC4gQWVuZWFuIHNpdCBhbWV0IGxvcmVtIGluIG1hdXJpcyBsb2JvcnRpcyB0cmlzdGlxdWUuIFZpdmFtdXMgaW4gcG9ydHRpdG9yIG5pc2wsIGFjIGltcGVyZGlldCBlbGl0LiBOYW0gbm9uIGV4IGNvbmd1ZSwgdmFyaXVzIGVyb3MgcHJldGl1bSwgZmF1Y2lidXMgc2VtLiBOYW0gc29kYWxlcyBwb3J0YSBlbmltIGEgbWF4aW11cy4gTnVsbGEgZmFjaWxpc2kuIE51bGxhIGVmZmljaXR1ciByaXN1cyBjb21tb2RvIGVnZXN0YXMgZWZmaWNpdHVyLiBJbiBoYWMgaGFiaXRhc3NlIHBsYXRlYSBkaWN0dW1zdC4gTWF1cmlzIG1vbGxpcyBhdWd1ZSB0ZWxsdXMsIGF0IHBvcnR0aXRvciB1cm5hIGZyaW5naWxsYSBlZ2V0LiBOYW0gc2l0IGFtZXQgcnV0cnVtIGlwc3VtLiBRdWlzcXVlIGFjIHBsYWNlcmF0IGVsaXQsIGEgYmliZW5kdW0gcHVydXMuIER1aXMgZmFjaWxpc2lzIHNhcGllbiBuaXNpLCBpbiBtYXhpbXVzIGlwc3VtIGxvYm9ydGlzIHV0LiBQcm9pbiByaG9uY3VzIGVsaXQgcGVsbGVudGVzcXVlLCBpYWN1bGlzIHRlbGx1cyBldSwgdmVoaWN1bGEgdG9ydG9yLiBNYWVjZW5hcyBuZWMgb3JjaSBhdCBuaWJoIGxhb3JlZXQgaW1wZXJkaWV0LgoKUGhhc2VsbHVzIHRvcnRvciBzZW0sIHJ1dHJ1bSBlbGVtZW50dW0gbnVuYyBldCwgdHJpc3RpcXVlIGZldWdpYXQgZW5pbS4gU2VkIGR1aSBlcmF0LCBibGFuZGl0IHV0IG51bGxhIG5lYywgZmV1Z2lhdCBsYW9yZWV0IHVybmEuIER1aXMgZXUgaW50ZXJkdW0gbG9yZW0uIFN1c3BlbmRpc3NlIGx1Y3R1cyBlbGl0IHZlbCBsaWd1bGEgbW9sbGlzLCB2ZWwgZWdlc3RhcyBvcmNpIGNvbmd1ZS4gTW9yYmkgZmluaWJ1cyBhcmN1IGV0IHBvcnR0aXRvciBibGFuZGl0LiBEb25lYyBjb25kaW1lbnR1bSBzYXBpZW4gbmVjIG51bGxhIHZpdmVycmEgcG9zdWVyZS4gU3VzcGVuZGlzc2UgcmlzdXMgZG9sb3IsIG1vbGxpcyBuZWMgbmliaCB2aXRhZSwgdml2ZXJyYSBtb2xlc3RpZSBmZWxpcy4KIDwvZGl2PgogPC9kaXY+CgogPGRpdiBzdHlsZT0ibWFyZ2luLXRvcDo1MHB4Ij4KICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWltYWdlIiBzdHlsZT0iYmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O2JhY2tncm91bmQtc2l6ZTpjb3ZlciIgOnN0eWxlPSJ7J2JhY2tncm91bmQtaW1hZ2UnOiAndXJsKCcgKyByZXF1aXJlKCcuLi9hc3NldHMvaW1hZ2VzL3NvbmtvMS5qcGcnKSArICcpJ30iPgogIAogIDxkaXYgY2xhc3M9ImFydGljbGUtY29udGVudCI+CiAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWhlYWRlciBzaXRlLW1haW4iPgogICAgICA8ZGl2IGNsYXNzPSJlbnRyeS1jYXRzIj4KICAgICAgICA8YT5MaWZlc3R5bGU8L2E+CiAgICAgIDwvZGl2PgogICAgICA8aDEgY2xhc3M9ImVudHJ5LXRpdGxlIj5GYXNoaW9uOiBUaGUgRXNzZW50aWFsIEd1aWRlIHRvIFNwcmluZyBhbmQgU3VtbWVyPC9oMT4KICAgICAgPGRpdiBjbGFzcz0iYXV0aG9yIj4KICAgICAgICA8YSBjbGFzcz0iYXZhdGFyIj4KICAgICAgICAgIDxpbWcgaGVpZ2h0PSI4MCIgd2lkdGg9IjgwIiBzcmM9Imh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3JlZHZlbHZldC9pbWFnZXMvNi82NS9SZWRfVmVsdmV0X0lyZW5lX1RoZV9QZXJmZWN0X1JlZF9WZWx2ZXRfcHJvbW9fcGljdHVyZV8yLlBORy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxODAxMjcxOTM0NDciLz4KICAgICAgICA8L2E+CiAgICAgICAgPGRpdiBjbGFzcz0iaW5uZXItbWV0YSI+CiAgICAgICAgICA8c3Bhbj5CeSA8YSBjbGFzcz0iY3JlYXRlZC1ieSI+SXJlbmU8L2E+PC9zcGFuPgogICAgICAgICAgPHAgY2xhc3M9ImNyZWF0ZWQtYXQiPkZlYnJ1YXJ5IDA1LCAyMDE4PC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgCiAgICAKICA8L2Rpdj4KICA8L2Rpdj4KICA8ZGl2PgoKICAgIENyYXMgaWQgZGlhbSBsYW9yZWV0IGxpZ3VsYSBtYWxlc3VhZGEgZmluaWJ1cy4gU3VzcGVuZGlzc2Ugdml2ZXJyYSBtYXVyaXMgZXN0LCBhdCB2ZW5lbmF0aXMgZG9sb3IgZWxlbWVudHVtIGF0LiBBZW5lYW4gc2l0IGFtZXQgbG9yZW0gaW4gbWF1cmlzIGxvYm9ydGlzIHRyaXN0aXF1ZS4gVml2YW11cyBpbiBwb3J0dGl0b3IgbmlzbCwgYWMgaW1wZXJkaWV0IGVsaXQuIE5hbSBub24gZXggY29uZ3VlLCB2YXJpdXMgZXJvcyBwcmV0aXVtLCBmYXVjaWJ1cyBzZW0uIE5hbSBzb2RhbGVzIHBvcnRhIGVuaW0gYSBtYXhpbXVzLiBOdWxsYSBmYWNpbGlzaS4gTnVsbGEgZWZmaWNpdHVyIHJpc3VzIGNvbW1vZG8gZWdlc3RhcyBlZmZpY2l0dXIuIEluIGhhYyBoYWJpdGFzc2UgcGxhdGVhIGRpY3R1bXN0LiBNYXVyaXMgbW9sbGlzIGF1Z3VlIHRlbGx1cywgYXQgcG9ydHRpdG9yIHVybmEgZnJpbmdpbGxhIGVnZXQuIE5hbSBzaXQgYW1ldCBydXRydW0gaXBzdW0uIFF1aXNxdWUgYWMgcGxhY2VyYXQgZWxpdCwgYSBiaWJlbmR1bSBwdXJ1cy4gRHVpcyBmYWNpbGlzaXMgc2FwaWVuIG5pc2ksIGluIG1heGltdXMgaXBzdW0gbG9ib3J0aXMgdXQuIFByb2luIHJob25jdXMgZWxpdCBwZWxsZW50ZXNxdWUsIGlhY3VsaXMgdGVsbHVzIGV1LCB2ZWhpY3VsYSB0b3J0b3IuIE1hZWNlbmFzIG5lYyBvcmNpIGF0IG5pYmggbGFvcmVldCBpbXBlcmRpZXQuCgpQaGFzZWxsdXMgdG9ydG9yIHNlbSwgcnV0cnVtIGVsZW1lbnR1bSBudW5jIGV0LCB0cmlzdGlxdWUgZmV1Z2lhdCBlbmltLiBTZWQgZHVpIGVyYXQsIGJsYW5kaXQgdXQgbnVsbGEgbmVjLCBmZXVnaWF0IGxhb3JlZXQgdXJuYS4gRHVpcyBldSBpbnRlcmR1bSBsb3JlbS4gU3VzcGVuZGlzc2UgbHVjdHVzIGVsaXQgdmVsIGxpZ3VsYSBtb2xsaXMsIHZlbCBlZ2VzdGFzIG9yY2kgY29uZ3VlLiBNb3JiaSBmaW5pYnVzIGFyY3UgZXQgcG9ydHRpdG9yIGJsYW5kaXQuIERvbmVjIGNvbmRpbWVudHVtIHNhcGllbiBuZWMgbnVsbGEgdml2ZXJyYSBwb3N1ZXJlLiBTdXNwZW5kaXNzZSByaXN1cyBkb2xvciwgbW9sbGlzIG5lYyBuaWJoIHZpdGFlLCB2aXZlcnJhIG1vbGVzdGllIGZlbGlzLgogPC9kaXY+CiA8L2Rpdj4KICAKCgoKIAoKCiAgCjwvZGl2PgoK"},null]}